#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define NUFU 1
#define SYM 2
#define NAV 3
#define MED 4
#define POI 5
#define SCR 6
#define SNI 7

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <150>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    #include "combos.dtsi"

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        gobak {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
        };

        selectA {
            bindings = <&kp LC(A)>;
            key-positions = <10 11>;
            timeout-ms = <0>;
            require-prior-idle-ms = <0>;
        };

        findF {
            bindings = <&kp LC(F)>;
            key-positions = <13 14>;
        };

        findfile {
            bindings = <&kp LA(LC(F))>;
            key-positions = <23 24>;
        };

        saves {
            bindings = <&kp LC(S)>;
            key-positions = <11 12>;
        };

        bubblemacro {
            bindings = <&bubble>;
            key-positions = <8 9>;
        };
    };

    macros {
        addtable: addtable {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(N) &kp T>;
            label = "ADDTABLE";
        };

        add_last: add_last {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(N) &kp N>;
            label = "ADD_LAST";
        };

        bubble: bubble {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "BUBBLE";
        };

        red: red {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(M) &kp R>;
            label = "RED";
        };

        black: black {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(M) &kp K>;
            label = "BLACK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &mt LS(Q) A  &mt LS(W) W  &mt LS(E) E     &mt LS(R) R  &mt LS(T) T    &mt LS(Y) Y  &mt LS(U) U                &mt LS(I) I          &mt LS(O) O      &mt LS(P) P
  &mt LS(A) A  &mt LS(S) S  &mt LS(D) D     &mt LS(F) F  &mt LS(G) G    &mt LS(H) H  &mt LS(J) J                &mt LS(K) K          &mt LS(L) L      &mt LS(APOS) APOS
  &mt LS(Z) Z  &mt LS(X) X  &mt LS(C) C     &mt LS(V) V  &mt LS(B) B    &mt LS(N) N  &mt LS(M) M                &mt LS(COMMA) COMMA  &mt LS(DOT) DOT  &mt LS(FSLH) FSLH
                            &lt 1 LEFT_ALT  &lt 2 TAB    &lt 3 SPACE    &kp ENTER    &mt LANGUAGE_2 LANGUAGE_1
            >;
        };

        NumNa {
            label = "NumNa";
            bindings = <
  &trans        &sk LSHIFT  &kp UP_ARROW  &sk LCTRL  &mt LS(LEFT_BRACKET) LEFT_BRACKET      &mt LS(MINUS) MINUS          &mt LS(N7) NUMBER_7  &mt LS(N8) N8        &mt LS(N9) NUMBER_9  &kp BACKSPACE
  &kp LEFT_WIN  &kp LEFT    &kp DOWN      &kp RIGHT  &mt LS(RIGHT_BRACKET) RIGHT_BRACKET    &mt LS(EQUAL) EQUAL          &mt LS(N4) NUMBER_4  &mt LS(N5) N5        &mt LS(N6) NUMBER_6  &kp DELETE
  &trans        &trans      &trans        &trans     &mt LS(GRAVE) GRAVE                    &mt LS(SEMICOLON) SEMICOLON  &mt LS(N1) NUMBER_1  &mt LS(N2) NUMBER_2  &kp LS(NUMBER_3)     &trans
                            &trans        &trans     &trans                                 &trans                       &mt LS(N0) N0
            >;
        };

        hwp {
            label = "hwp";
            bindings = <
  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)  &kp LC(NUMBER_4)  &kp LC(N5)    &kp LC(NUMBER_6)  &kp LC(N7)  &kp LC(N8)       &kp LC(N9)       &kp LC(N0)
  &trans            &kp LC(F2)        &trans            &trans            &addtable     &trans            &kp LC(U)   &black           &trans           &kp PRINTSCREEN
  &trans            &trans            &trans            &trans            &kp LC(B)     &add_last         &red        &kp LC(LS(INS))  &kp LA(LS(INS))  &kp LA(INS)
                                      &trans            &trans            &trans        &trans            &trans
            >;
        };

        mousefn {
            label = "mousefn";
            bindings = <
  &kp F1  &kp F2         &kp F3  &kp F4  &kp F5    &kp F6    &kp F7    &kp F8    &kp F9    &kp BACKSPACE
  &trans  &kp LC(LS(N))  &trans  &trans  &trans    &trans    &trans    &trans    &trans    &trans
  &trans  &trans         &trans  &trans  &trans    &trans    &trans    &mkp MB4  &mkp MB5  &trans
                         &trans  &trans  &trans    &mkp MB2  &mkp MB1
            >;
        };
    };
};
